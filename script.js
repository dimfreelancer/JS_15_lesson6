'use strict';

/*
Урок №6
Тема Функции, область видимости и замыкание
ОБЯЗАТЕЛЬНОЕ ЗАДАНИЕ:
Это задание выполняется отдельно от нашего проекта с бюджетом!
Для этого задания создайте отдельный репозиторий.
Используйте функции alert, confirm, prompt для общения с пользователем.
Написать игровой бот.
"Загадывание случайного числа от 1 до 100"
Что должна делать программа:
— спрашивает пользователя: "Угадай число от 1 до 100".
— если пользовательское число больше, то бот выводит "Загаданное число меньше" и предлагает ввести новый вариант;
— если пользовательское число меньше, то бот выводит "Загаданное число больше" и предлагает ввести новый вариант;
— если пользователь ввел не число, то выводит сообщение "Введи число!" и предлагает ввести новый вариант;
— если пользователь нажимает "Отмена", то игра заканчивается и выводится сообщение "Игра окончена".
—  если пользовательское число равно загаданному, то игра заканчивается и выводит сообщение  "Поздравляю, Вы угадали!!!".
Программа должны быть выполнена с помощью рекурсии, без единого цикла.
Загаданное число должно храниться «в замыкании»
*/


/*
УСЛОЖНЕННОЕ ЗАДАНИЕ: 
Дописать функционал игрового бота.

Кол-во попыток пользователя должно быть ограничено: 10
— если пользовательское число больше, то бот выводит "Загаданное число меньше, осталось попыток ..." и предлагает ввести новый вариант;
— если пользовательское число меньше, то бот выводит "Загаданное число больше, осталось попыток ..." и предлагает ввести новый вариант;
— если пользователь вводит правильное число, то бот выводит "Поздравляю, Вы угадали!!! Хотели бы сыграть еще?", при нажатии ОК игра перезапускается (снова 10 попыток и новое загаданное число)
— если пользователь ввел не число, то выводит сообщение "Введи число!" и предлагает ввести новый вариант;
— если пользователь нажимает "Отмена", то игра выводит прощальное сообщение и завершается.
— если закончились попытки то программа сообщает: "Попытки закончились, хотите сыграть еще?"

Программа должны быть выполнена с помощью рекурсии, без единого цикла.
Загаданное число и оставшиеся кол-во попыток должно храниться «в замыкании»
*/


const consoleAlert = (str) => {
    console.log(str);
    alert(str);
}

const consolePrompt = (str) => {
    console.log(str);
    return prompt(str);
}

// let isNumber = (n) => !isNaN(parseFloat(n)) && isFinite(n);
//варианты функции
var isNumber = function isNumber(value) {
    return typeof value === 'number' && isFinite(value);
}

const randomInteger = () => {
    const MIN = 1;
    const MAX = 100;
    let result = Math.floor((MAX * Math.random()) + MIN);
    // console.log('debug result: ', result);
    return result;
};


///////////////////////////////////////////////////////////////////////////

const main = () => {

    const seed = randomInteger(); //генерим загаданое число - это сохранится в замыкании функции
    let i = 10; //количество попыток храним в замыкании

    const next = () => {
        
        // console.log('Угадайте число от 1 до 100');
        // let ans = prompt('Угадайте число от 1 до 100'); //Ответ пользователя

        let ans; // сюда сохраним ответ пользователя
        // функция обработки цифровой семантики слова попытка
        let getTry = (count) => { 
            if (count == 0) { return '0 попыток'; }
            if (count == 1) { return '1 попытка'; }
            if (count == 2 || count == 3 || count == 4) { return count + ' попытки'; }
            if (count >= 5 && count <= 10) { return count + ' попыток'; }
        };
        
        if (i <= 0) {
            consoleAlert('У тебя не осталось попыток\n' + 
                            'Игра окончена!');
            return; //выход из функции по истечению колличества попыток
        } else { // i > 0

            // 1 попытка
            // 2, 3, 4 попытки
            // 5, 6, 7, 8, 9, 10, 0 попыток
            ans = consolePrompt('Угадай число от 1 до 100\n' + 
                                    'У тебя ' + getTry(i));
        }

        console.log('Попытка: ' + i + '\nОтвет пользователя: ', ans);

        if (ans === null) {
            consoleAlert('Вы нажали отмена\nКонец игры');
            return; //выход из функции по Escape
        }

        ans = parseInt(ans);
        // console.log('ans: ', ans, 'typeof ans', typeof ans);
        if ( !isNumber(ans) ) {
            //проверка на корректость ввода данных
            consoleAlert('Ошибка! Вы ввели строку!!!\nВведите целое число от 1 до 100');
            i++;//в этом случае количество попыток не должно уменьшаться

        } else if (seed < ans) {
            consoleAlert('Загаданное число меньше << ' + ans +
                            '\nУ тебе осталось еще ' + (i-1) + ' попыток чтобы угадать');
        } else if (seed > ans) {
            // console.log('Загаданное число БОЛЬШЕ >>');
            // alert('Загаданное число БОЛЬШЕ >>');
            consoleAlert('Загаданное число БОЛЬШЕ >> ' + ans +
                            '\nУ тебе осталось еще ' + (i-1) + ' попыток чтобы угадать');
        } else if (seed === ans ) {
            consoleAlert('Поздравляю, Вы угадали!\nУРААААА!!!!\n' +
                        'Загаданное число ' + ans);
            return; //выход из функции
            //Пользователь выиграл!!!!
        }
        // consoleAlert('У вас осталось ' + (i-1) + ' попыток чтобы угадать');

        --i; //дикримент колличества попыток
        next(); //следующий запуск итеррации рекурсии
    };

    return next; //возвращаем ссылку на функцию в замыкании
};


const play = main(); //генерация замыкания в функции
play(); //по сути наша функция next()

